//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CNO.BPA.DataHandler {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("IndexData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class IndexData : global::System.Data.DataSet {
        
        private DD_ITEMDataTable tableDD_ITEM;
        
        private DD_ITEM_INDEXESDataTable tableDD_ITEM_INDEXES;
        
        private global::System.Data.DataRelation relationDD_ITEM_DD_ITEM_INDEXES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public IndexData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected IndexData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DD_ITEM"] != null)) {
                    base.Tables.Add(new DD_ITEMDataTable(ds.Tables["DD_ITEM"]));
                }
                if ((ds.Tables["DD_ITEM_INDEXES"] != null)) {
                    base.Tables.Add(new DD_ITEM_INDEXESDataTable(ds.Tables["DD_ITEM_INDEXES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DD_ITEMDataTable DD_ITEM {
            get {
                return this.tableDD_ITEM;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DD_ITEM_INDEXESDataTable DD_ITEM_INDEXES {
            get {
                return this.tableDD_ITEM_INDEXES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            IndexData cln = ((IndexData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DD_ITEM"] != null)) {
                    base.Tables.Add(new DD_ITEMDataTable(ds.Tables["DD_ITEM"]));
                }
                if ((ds.Tables["DD_ITEM_INDEXES"] != null)) {
                    base.Tables.Add(new DD_ITEM_INDEXESDataTable(ds.Tables["DD_ITEM_INDEXES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDD_ITEM = ((DD_ITEMDataTable)(base.Tables["DD_ITEM"]));
            if ((initTable == true)) {
                if ((this.tableDD_ITEM != null)) {
                    this.tableDD_ITEM.InitVars();
                }
            }
            this.tableDD_ITEM_INDEXES = ((DD_ITEM_INDEXESDataTable)(base.Tables["DD_ITEM_INDEXES"]));
            if ((initTable == true)) {
                if ((this.tableDD_ITEM_INDEXES != null)) {
                    this.tableDD_ITEM_INDEXES.InitVars();
                }
            }
            this.relationDD_ITEM_DD_ITEM_INDEXES = this.Relations["DD_ITEM_DD_ITEM_INDEXES"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "IndexData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/IndexData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDD_ITEM = new DD_ITEMDataTable();
            base.Tables.Add(this.tableDD_ITEM);
            this.tableDD_ITEM_INDEXES = new DD_ITEM_INDEXESDataTable();
            base.Tables.Add(this.tableDD_ITEM_INDEXES);
            this.relationDD_ITEM_DD_ITEM_INDEXES = new global::System.Data.DataRelation("DD_ITEM_DD_ITEM_INDEXES", new global::System.Data.DataColumn[] {
                        this.tableDD_ITEM.DD_ITEM_SEQColumn}, new global::System.Data.DataColumn[] {
                        this.tableDD_ITEM_INDEXES.DD_ITEM_SEQColumn}, false);
            this.Relations.Add(this.relationDD_ITEM_DD_ITEM_INDEXES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDD_ITEM() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDD_ITEM_INDEXES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            IndexData ds = new IndexData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DD_ITEMRowChangeEventHandler(object sender, DD_ITEMRowChangeEvent e);
        
        public delegate void DD_ITEM_INDEXESRowChangeEventHandler(object sender, DD_ITEM_INDEXESRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DD_ITEMDataTable : global::System.Data.TypedTableBase<DD_ITEMRow> {
            
            private global::System.Data.DataColumn columnDD_ITEM_SEQ;
            
            private global::System.Data.DataColumn columnCREATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_DATE;
            
            private global::System.Data.DataColumn columnUPDATE_APP_NAME;
            
            private global::System.Data.DataColumn columnUPDATE_MACHINE_NAME;
            
            private global::System.Data.DataColumn columnUPDATE_USER_ID;
            
            private global::System.Data.DataColumn columnBATCH_NO;
            
            private global::System.Data.DataColumn columnF_DOC_XREF;
            
            private global::System.Data.DataColumn columnCURRENT_STATUS;
            
            private global::System.Data.DataColumn columnPREVIOUS_STATUS;
            
            private global::System.Data.DataColumn columnKICKER_REQUEST_ID;
            
            private global::System.Data.DataColumn columnCASE_ID;
            
            private global::System.Data.DataColumn columnTRANSACTION_ID;
            
            private global::System.Data.DataColumn columnSOURCE_ID;
            
            private global::System.Data.DataColumn columnF_DOCNUMBER;
            
            private global::System.Data.DataColumn columnDOCUSTREAM_REQUEST_ID;
            
            private global::System.Data.DataColumn columnFRONT_OFFICE_REQUEST_ID;
            
            private global::System.Data.DataColumn columnF_DOCCLASSNAME;
            
            private global::System.Data.DataColumn columnTHIRD_PARTY_REQUEST_ID;
            
            private global::System.Data.DataColumn columnFNP8_DOCID;
            
            private global::System.Data.DataColumn columnFNP8_DOCCLASSNAME;
            
            private global::System.Data.DataColumn columnFNP8_OBJECTSTORE;
            
            private global::System.Data.DataColumn columnFNP8_FOLDER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMDataTable() {
                this.TableName = "DD_ITEM";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_ITEMDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DD_ITEMDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DD_ITEM_SEQColumn {
                get {
                    return this.columnDD_ITEM_SEQ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CREATE_DATEColumn {
                get {
                    return this.columnCREATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_DATEColumn {
                get {
                    return this.columnUPDATE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_APP_NAMEColumn {
                get {
                    return this.columnUPDATE_APP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_MACHINE_NAMEColumn {
                get {
                    return this.columnUPDATE_MACHINE_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UPDATE_USER_IDColumn {
                get {
                    return this.columnUPDATE_USER_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BATCH_NOColumn {
                get {
                    return this.columnBATCH_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F_DOC_XREFColumn {
                get {
                    return this.columnF_DOC_XREF;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CURRENT_STATUSColumn {
                get {
                    return this.columnCURRENT_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREVIOUS_STATUSColumn {
                get {
                    return this.columnPREVIOUS_STATUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KICKER_REQUEST_IDColumn {
                get {
                    return this.columnKICKER_REQUEST_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CASE_IDColumn {
                get {
                    return this.columnCASE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TRANSACTION_IDColumn {
                get {
                    return this.columnTRANSACTION_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOURCE_IDColumn {
                get {
                    return this.columnSOURCE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F_DOCNUMBERColumn {
                get {
                    return this.columnF_DOCNUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUSTREAM_REQUEST_IDColumn {
                get {
                    return this.columnDOCUSTREAM_REQUEST_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FRONT_OFFICE_REQUEST_IDColumn {
                get {
                    return this.columnFRONT_OFFICE_REQUEST_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F_DOCCLASSNAMEColumn {
                get {
                    return this.columnF_DOCCLASSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn THIRD_PARTY_REQUEST_IDColumn {
                get {
                    return this.columnTHIRD_PARTY_REQUEST_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_DOCIDColumn {
                get {
                    return this.columnFNP8_DOCID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_DOCCLASSNAMEColumn {
                get {
                    return this.columnFNP8_DOCCLASSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_OBJECTSTOREColumn {
                get {
                    return this.columnFNP8_OBJECTSTORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_FOLDERColumn {
                get {
                    return this.columnFNP8_FOLDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMRow this[int index] {
                get {
                    return ((DD_ITEMRow)(this.Rows[index]));
                }
            }
            
            public event DD_ITEMRowChangeEventHandler DD_ITEMRowChanging;
            
            public event DD_ITEMRowChangeEventHandler DD_ITEMRowChanged;
            
            public event DD_ITEMRowChangeEventHandler DD_ITEMRowDeleting;
            
            public event DD_ITEMRowChangeEventHandler DD_ITEMRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDD_ITEMRow(DD_ITEMRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMRow AddDD_ITEMRow(
                        decimal DD_ITEM_SEQ, 
                        System.DateTime CREATE_DATE, 
                        System.DateTime UPDATE_DATE, 
                        string UPDATE_APP_NAME, 
                        string UPDATE_MACHINE_NAME, 
                        string UPDATE_USER_ID, 
                        string BATCH_NO, 
                        string F_DOC_XREF, 
                        decimal CURRENT_STATUS, 
                        decimal PREVIOUS_STATUS, 
                        decimal KICKER_REQUEST_ID, 
                        decimal CASE_ID, 
                        decimal TRANSACTION_ID, 
                        decimal SOURCE_ID, 
                        decimal F_DOCNUMBER, 
                        decimal DOCUSTREAM_REQUEST_ID, 
                        decimal FRONT_OFFICE_REQUEST_ID, 
                        string F_DOCCLASSNAME, 
                        decimal THIRD_PARTY_REQUEST_ID, 
                        string FNP8_DOCID, 
                        string FNP8_DOCCLASSNAME, 
                        string FNP8_OBJECTSTORE, 
                        string FNP8_FOLDER) {
                DD_ITEMRow rowDD_ITEMRow = ((DD_ITEMRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DD_ITEM_SEQ,
                        CREATE_DATE,
                        UPDATE_DATE,
                        UPDATE_APP_NAME,
                        UPDATE_MACHINE_NAME,
                        UPDATE_USER_ID,
                        BATCH_NO,
                        F_DOC_XREF,
                        CURRENT_STATUS,
                        PREVIOUS_STATUS,
                        KICKER_REQUEST_ID,
                        CASE_ID,
                        TRANSACTION_ID,
                        SOURCE_ID,
                        F_DOCNUMBER,
                        DOCUSTREAM_REQUEST_ID,
                        FRONT_OFFICE_REQUEST_ID,
                        F_DOCCLASSNAME,
                        THIRD_PARTY_REQUEST_ID,
                        FNP8_DOCID,
                        FNP8_DOCCLASSNAME,
                        FNP8_OBJECTSTORE,
                        FNP8_FOLDER};
                rowDD_ITEMRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDD_ITEMRow);
                return rowDD_ITEMRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DD_ITEMDataTable cln = ((DD_ITEMDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DD_ITEMDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDD_ITEM_SEQ = base.Columns["DD_ITEM_SEQ"];
                this.columnCREATE_DATE = base.Columns["CREATE_DATE"];
                this.columnUPDATE_DATE = base.Columns["UPDATE_DATE"];
                this.columnUPDATE_APP_NAME = base.Columns["UPDATE_APP_NAME"];
                this.columnUPDATE_MACHINE_NAME = base.Columns["UPDATE_MACHINE_NAME"];
                this.columnUPDATE_USER_ID = base.Columns["UPDATE_USER_ID"];
                this.columnBATCH_NO = base.Columns["BATCH_NO"];
                this.columnF_DOC_XREF = base.Columns["F_DOC_XREF"];
                this.columnCURRENT_STATUS = base.Columns["CURRENT_STATUS"];
                this.columnPREVIOUS_STATUS = base.Columns["PREVIOUS_STATUS"];
                this.columnKICKER_REQUEST_ID = base.Columns["KICKER_REQUEST_ID"];
                this.columnCASE_ID = base.Columns["CASE_ID"];
                this.columnTRANSACTION_ID = base.Columns["TRANSACTION_ID"];
                this.columnSOURCE_ID = base.Columns["SOURCE_ID"];
                this.columnF_DOCNUMBER = base.Columns["F_DOCNUMBER"];
                this.columnDOCUSTREAM_REQUEST_ID = base.Columns["DOCUSTREAM_REQUEST_ID"];
                this.columnFRONT_OFFICE_REQUEST_ID = base.Columns["FRONT_OFFICE_REQUEST_ID"];
                this.columnF_DOCCLASSNAME = base.Columns["F_DOCCLASSNAME"];
                this.columnTHIRD_PARTY_REQUEST_ID = base.Columns["THIRD_PARTY_REQUEST_ID"];
                this.columnFNP8_DOCID = base.Columns["FNP8_DOCID"];
                this.columnFNP8_DOCCLASSNAME = base.Columns["FNP8_DOCCLASSNAME"];
                this.columnFNP8_OBJECTSTORE = base.Columns["FNP8_OBJECTSTORE"];
                this.columnFNP8_FOLDER = base.Columns["FNP8_FOLDER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDD_ITEM_SEQ = new global::System.Data.DataColumn("DD_ITEM_SEQ", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDD_ITEM_SEQ);
                this.columnCREATE_DATE = new global::System.Data.DataColumn("CREATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCREATE_DATE);
                this.columnUPDATE_DATE = new global::System.Data.DataColumn("UPDATE_DATE", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_DATE);
                this.columnUPDATE_APP_NAME = new global::System.Data.DataColumn("UPDATE_APP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_APP_NAME);
                this.columnUPDATE_MACHINE_NAME = new global::System.Data.DataColumn("UPDATE_MACHINE_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_MACHINE_NAME);
                this.columnUPDATE_USER_ID = new global::System.Data.DataColumn("UPDATE_USER_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUPDATE_USER_ID);
                this.columnBATCH_NO = new global::System.Data.DataColumn("BATCH_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBATCH_NO);
                this.columnF_DOC_XREF = new global::System.Data.DataColumn("F_DOC_XREF", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF_DOC_XREF);
                this.columnCURRENT_STATUS = new global::System.Data.DataColumn("CURRENT_STATUS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCURRENT_STATUS);
                this.columnPREVIOUS_STATUS = new global::System.Data.DataColumn("PREVIOUS_STATUS", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREVIOUS_STATUS);
                this.columnKICKER_REQUEST_ID = new global::System.Data.DataColumn("KICKER_REQUEST_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKICKER_REQUEST_ID);
                this.columnCASE_ID = new global::System.Data.DataColumn("CASE_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCASE_ID);
                this.columnTRANSACTION_ID = new global::System.Data.DataColumn("TRANSACTION_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRANSACTION_ID);
                this.columnSOURCE_ID = new global::System.Data.DataColumn("SOURCE_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCE_ID);
                this.columnF_DOCNUMBER = new global::System.Data.DataColumn("F_DOCNUMBER", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF_DOCNUMBER);
                this.columnDOCUSTREAM_REQUEST_ID = new global::System.Data.DataColumn("DOCUSTREAM_REQUEST_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUSTREAM_REQUEST_ID);
                this.columnFRONT_OFFICE_REQUEST_ID = new global::System.Data.DataColumn("FRONT_OFFICE_REQUEST_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFRONT_OFFICE_REQUEST_ID);
                this.columnF_DOCCLASSNAME = new global::System.Data.DataColumn("F_DOCCLASSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF_DOCCLASSNAME);
                this.columnTHIRD_PARTY_REQUEST_ID = new global::System.Data.DataColumn("THIRD_PARTY_REQUEST_ID", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHIRD_PARTY_REQUEST_ID);
                this.columnFNP8_DOCID = new global::System.Data.DataColumn("FNP8_DOCID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_DOCID);
                this.columnFNP8_DOCCLASSNAME = new global::System.Data.DataColumn("FNP8_DOCCLASSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_DOCCLASSNAME);
                this.columnFNP8_OBJECTSTORE = new global::System.Data.DataColumn("FNP8_OBJECTSTORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_OBJECTSTORE);
                this.columnFNP8_FOLDER = new global::System.Data.DataColumn("FNP8_FOLDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_FOLDER);
                this.columnDD_ITEM_SEQ.AllowDBNull = false;
                this.columnF_DOC_XREF.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMRow NewDD_ITEMRow() {
                return ((DD_ITEMRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DD_ITEMRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DD_ITEMRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DD_ITEMRowChanged != null)) {
                    this.DD_ITEMRowChanged(this, new DD_ITEMRowChangeEvent(((DD_ITEMRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DD_ITEMRowChanging != null)) {
                    this.DD_ITEMRowChanging(this, new DD_ITEMRowChangeEvent(((DD_ITEMRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DD_ITEMRowDeleted != null)) {
                    this.DD_ITEMRowDeleted(this, new DD_ITEMRowChangeEvent(((DD_ITEMRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DD_ITEMRowDeleting != null)) {
                    this.DD_ITEMRowDeleting(this, new DD_ITEMRowChangeEvent(((DD_ITEMRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDD_ITEMRow(DD_ITEMRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexData ds = new IndexData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DD_ITEMDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DD_ITEM_INDEXESDataTable : global::System.Data.TypedTableBase<DD_ITEM_INDEXESRow> {
            
            private global::System.Data.DataColumn columnDD_ITEM_SEQ;
            
            private global::System.Data.DataColumn columnINDEX_NAME;
            
            private global::System.Data.DataColumn columnINDEX_VALUE;
            
            private global::System.Data.DataColumn columnFNP8_INDEX_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESDataTable() {
                this.TableName = "DD_ITEM_INDEXES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_ITEM_INDEXESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DD_ITEM_INDEXESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DD_ITEM_SEQColumn {
                get {
                    return this.columnDD_ITEM_SEQ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INDEX_NAMEColumn {
                get {
                    return this.columnINDEX_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INDEX_VALUEColumn {
                get {
                    return this.columnINDEX_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_INDEX_NAMEColumn {
                get {
                    return this.columnFNP8_INDEX_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESRow this[int index] {
                get {
                    return ((DD_ITEM_INDEXESRow)(this.Rows[index]));
                }
            }
            
            public event DD_ITEM_INDEXESRowChangeEventHandler DD_ITEM_INDEXESRowChanging;
            
            public event DD_ITEM_INDEXESRowChangeEventHandler DD_ITEM_INDEXESRowChanged;
            
            public event DD_ITEM_INDEXESRowChangeEventHandler DD_ITEM_INDEXESRowDeleting;
            
            public event DD_ITEM_INDEXESRowChangeEventHandler DD_ITEM_INDEXESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDD_ITEM_INDEXESRow(DD_ITEM_INDEXESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESRow AddDD_ITEM_INDEXESRow(DD_ITEMRow parentDD_ITEMRowByDD_ITEM_DD_ITEM_INDEXES, string INDEX_NAME, string INDEX_VALUE, string FNP8_INDEX_NAME) {
                DD_ITEM_INDEXESRow rowDD_ITEM_INDEXESRow = ((DD_ITEM_INDEXESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        INDEX_NAME,
                        INDEX_VALUE,
                        FNP8_INDEX_NAME};
                if ((parentDD_ITEMRowByDD_ITEM_DD_ITEM_INDEXES != null)) {
                    columnValuesArray[0] = parentDD_ITEMRowByDD_ITEM_DD_ITEM_INDEXES[0];
                }
                rowDD_ITEM_INDEXESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDD_ITEM_INDEXESRow);
                return rowDD_ITEM_INDEXESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DD_ITEM_INDEXESDataTable cln = ((DD_ITEM_INDEXESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DD_ITEM_INDEXESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDD_ITEM_SEQ = base.Columns["DD_ITEM_SEQ"];
                this.columnINDEX_NAME = base.Columns["INDEX_NAME"];
                this.columnINDEX_VALUE = base.Columns["INDEX_VALUE"];
                this.columnFNP8_INDEX_NAME = base.Columns["FNP8_INDEX_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDD_ITEM_SEQ = new global::System.Data.DataColumn("DD_ITEM_SEQ", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDD_ITEM_SEQ);
                this.columnINDEX_NAME = new global::System.Data.DataColumn("INDEX_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINDEX_NAME);
                this.columnINDEX_VALUE = new global::System.Data.DataColumn("INDEX_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINDEX_VALUE);
                this.columnFNP8_INDEX_NAME = new global::System.Data.DataColumn("FNP8_INDEX_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_INDEX_NAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESRow NewDD_ITEM_INDEXESRow() {
                return ((DD_ITEM_INDEXESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DD_ITEM_INDEXESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DD_ITEM_INDEXESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DD_ITEM_INDEXESRowChanged != null)) {
                    this.DD_ITEM_INDEXESRowChanged(this, new DD_ITEM_INDEXESRowChangeEvent(((DD_ITEM_INDEXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DD_ITEM_INDEXESRowChanging != null)) {
                    this.DD_ITEM_INDEXESRowChanging(this, new DD_ITEM_INDEXESRowChangeEvent(((DD_ITEM_INDEXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DD_ITEM_INDEXESRowDeleted != null)) {
                    this.DD_ITEM_INDEXESRowDeleted(this, new DD_ITEM_INDEXESRowChangeEvent(((DD_ITEM_INDEXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DD_ITEM_INDEXESRowDeleting != null)) {
                    this.DD_ITEM_INDEXESRowDeleting(this, new DD_ITEM_INDEXESRowChangeEvent(((DD_ITEM_INDEXESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDD_ITEM_INDEXESRow(DD_ITEM_INDEXESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                IndexData ds = new IndexData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DD_ITEM_INDEXESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DD_ITEMRow : global::System.Data.DataRow {
            
            private DD_ITEMDataTable tableDD_ITEM;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_ITEMRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDD_ITEM = ((DD_ITEMDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DD_ITEM_SEQ {
                get {
                    return ((decimal)(this[this.tableDD_ITEM.DD_ITEM_SEQColumn]));
                }
                set {
                    this[this.tableDD_ITEM.DD_ITEM_SEQColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CREATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDD_ITEM.CREATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CREATE_DATE\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.CREATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime UPDATE_DATE {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDD_ITEM.UPDATE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_DATE\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.UPDATE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_APP_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.UPDATE_APP_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_APP_NAME\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.UPDATE_APP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_MACHINE_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.UPDATE_MACHINE_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_MACHINE_NAME\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.UPDATE_MACHINE_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UPDATE_USER_ID {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.UPDATE_USER_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UPDATE_USER_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.UPDATE_USER_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BATCH_NO {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.BATCH_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BATCH_NO\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.BATCH_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F_DOC_XREF {
                get {
                    return ((string)(this[this.tableDD_ITEM.F_DOC_XREFColumn]));
                }
                set {
                    this[this.tableDD_ITEM.F_DOC_XREFColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CURRENT_STATUS {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.CURRENT_STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CURRENT_STATUS\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.CURRENT_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PREVIOUS_STATUS {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.PREVIOUS_STATUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PREVIOUS_STATUS\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.PREVIOUS_STATUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal KICKER_REQUEST_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.KICKER_REQUEST_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'KICKER_REQUEST_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.KICKER_REQUEST_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal CASE_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.CASE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CASE_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.CASE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TRANSACTION_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.TRANSACTION_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRANSACTION_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.TRANSACTION_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal SOURCE_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.SOURCE_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SOURCE_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.SOURCE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal F_DOCNUMBER {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.F_DOCNUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F_DOCNUMBER\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.F_DOCNUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DOCUSTREAM_REQUEST_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.DOCUSTREAM_REQUEST_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUSTREAM_REQUEST_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.DOCUSTREAM_REQUEST_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal FRONT_OFFICE_REQUEST_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.FRONT_OFFICE_REQUEST_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FRONT_OFFICE_REQUEST_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.FRONT_OFFICE_REQUEST_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F_DOCCLASSNAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.F_DOCCLASSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F_DOCCLASSNAME\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.F_DOCCLASSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal THIRD_PARTY_REQUEST_ID {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM.THIRD_PARTY_REQUEST_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'THIRD_PARTY_REQUEST_ID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.THIRD_PARTY_REQUEST_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_DOCID {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.FNP8_DOCIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_DOCID\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.FNP8_DOCIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_DOCCLASSNAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.FNP8_DOCCLASSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_DOCCLASSNAME\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.FNP8_DOCCLASSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_OBJECTSTORE {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.FNP8_OBJECTSTOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_OBJECTSTORE\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.FNP8_OBJECTSTOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_FOLDER {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM.FNP8_FOLDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_FOLDER\' in table \'DD_ITEM\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM.FNP8_FOLDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCREATE_DATENull() {
                return this.IsNull(this.tableDD_ITEM.CREATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCREATE_DATENull() {
                this[this.tableDD_ITEM.CREATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_DATENull() {
                return this.IsNull(this.tableDD_ITEM.UPDATE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_DATENull() {
                this[this.tableDD_ITEM.UPDATE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_APP_NAMENull() {
                return this.IsNull(this.tableDD_ITEM.UPDATE_APP_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_APP_NAMENull() {
                this[this.tableDD_ITEM.UPDATE_APP_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_MACHINE_NAMENull() {
                return this.IsNull(this.tableDD_ITEM.UPDATE_MACHINE_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_MACHINE_NAMENull() {
                this[this.tableDD_ITEM.UPDATE_MACHINE_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUPDATE_USER_IDNull() {
                return this.IsNull(this.tableDD_ITEM.UPDATE_USER_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUPDATE_USER_IDNull() {
                this[this.tableDD_ITEM.UPDATE_USER_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBATCH_NONull() {
                return this.IsNull(this.tableDD_ITEM.BATCH_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBATCH_NONull() {
                this[this.tableDD_ITEM.BATCH_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCURRENT_STATUSNull() {
                return this.IsNull(this.tableDD_ITEM.CURRENT_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCURRENT_STATUSNull() {
                this[this.tableDD_ITEM.CURRENT_STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREVIOUS_STATUSNull() {
                return this.IsNull(this.tableDD_ITEM.PREVIOUS_STATUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREVIOUS_STATUSNull() {
                this[this.tableDD_ITEM.PREVIOUS_STATUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKICKER_REQUEST_IDNull() {
                return this.IsNull(this.tableDD_ITEM.KICKER_REQUEST_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKICKER_REQUEST_IDNull() {
                this[this.tableDD_ITEM.KICKER_REQUEST_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCASE_IDNull() {
                return this.IsNull(this.tableDD_ITEM.CASE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCASE_IDNull() {
                this[this.tableDD_ITEM.CASE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTRANSACTION_IDNull() {
                return this.IsNull(this.tableDD_ITEM.TRANSACTION_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTRANSACTION_IDNull() {
                this[this.tableDD_ITEM.TRANSACTION_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOURCE_IDNull() {
                return this.IsNull(this.tableDD_ITEM.SOURCE_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOURCE_IDNull() {
                this[this.tableDD_ITEM.SOURCE_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF_DOCNUMBERNull() {
                return this.IsNull(this.tableDD_ITEM.F_DOCNUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF_DOCNUMBERNull() {
                this[this.tableDD_ITEM.F_DOCNUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUSTREAM_REQUEST_IDNull() {
                return this.IsNull(this.tableDD_ITEM.DOCUSTREAM_REQUEST_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUSTREAM_REQUEST_IDNull() {
                this[this.tableDD_ITEM.DOCUSTREAM_REQUEST_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFRONT_OFFICE_REQUEST_IDNull() {
                return this.IsNull(this.tableDD_ITEM.FRONT_OFFICE_REQUEST_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFRONT_OFFICE_REQUEST_IDNull() {
                this[this.tableDD_ITEM.FRONT_OFFICE_REQUEST_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF_DOCCLASSNAMENull() {
                return this.IsNull(this.tableDD_ITEM.F_DOCCLASSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF_DOCCLASSNAMENull() {
                this[this.tableDD_ITEM.F_DOCCLASSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTHIRD_PARTY_REQUEST_IDNull() {
                return this.IsNull(this.tableDD_ITEM.THIRD_PARTY_REQUEST_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTHIRD_PARTY_REQUEST_IDNull() {
                this[this.tableDD_ITEM.THIRD_PARTY_REQUEST_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_DOCIDNull() {
                return this.IsNull(this.tableDD_ITEM.FNP8_DOCIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_DOCIDNull() {
                this[this.tableDD_ITEM.FNP8_DOCIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_DOCCLASSNAMENull() {
                return this.IsNull(this.tableDD_ITEM.FNP8_DOCCLASSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_DOCCLASSNAMENull() {
                this[this.tableDD_ITEM.FNP8_DOCCLASSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_OBJECTSTORENull() {
                return this.IsNull(this.tableDD_ITEM.FNP8_OBJECTSTOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_OBJECTSTORENull() {
                this[this.tableDD_ITEM.FNP8_OBJECTSTOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_FOLDERNull() {
                return this.IsNull(this.tableDD_ITEM.FNP8_FOLDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_FOLDERNull() {
                this[this.tableDD_ITEM.FNP8_FOLDERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESRow[] GetDD_ITEM_INDEXESRows() {
                if ((this.Table.ChildRelations["DD_ITEM_DD_ITEM_INDEXES"] == null)) {
                    return new DD_ITEM_INDEXESRow[0];
                }
                else {
                    return ((DD_ITEM_INDEXESRow[])(base.GetChildRows(this.Table.ChildRelations["DD_ITEM_DD_ITEM_INDEXES"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DD_ITEM_INDEXESRow : global::System.Data.DataRow {
            
            private DD_ITEM_INDEXESDataTable tableDD_ITEM_INDEXES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_ITEM_INDEXESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDD_ITEM_INDEXES = ((DD_ITEM_INDEXESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DD_ITEM_SEQ {
                get {
                    try {
                        return ((decimal)(this[this.tableDD_ITEM_INDEXES.DD_ITEM_SEQColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DD_ITEM_SEQ\' in table \'DD_ITEM_INDEXES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM_INDEXES.DD_ITEM_SEQColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INDEX_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM_INDEXES.INDEX_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INDEX_NAME\' in table \'DD_ITEM_INDEXES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM_INDEXES.INDEX_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INDEX_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM_INDEXES.INDEX_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INDEX_VALUE\' in table \'DD_ITEM_INDEXES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM_INDEXES.INDEX_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_INDEX_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_ITEM_INDEXES.FNP8_INDEX_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_INDEX_NAME\' in table \'DD_ITEM_INDEXES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_ITEM_INDEXES.FNP8_INDEX_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMRow DD_ITEMRow {
                get {
                    return ((DD_ITEMRow)(this.GetParentRow(this.Table.ParentRelations["DD_ITEM_DD_ITEM_INDEXES"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["DD_ITEM_DD_ITEM_INDEXES"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDD_ITEM_SEQNull() {
                return this.IsNull(this.tableDD_ITEM_INDEXES.DD_ITEM_SEQColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDD_ITEM_SEQNull() {
                this[this.tableDD_ITEM_INDEXES.DD_ITEM_SEQColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINDEX_NAMENull() {
                return this.IsNull(this.tableDD_ITEM_INDEXES.INDEX_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINDEX_NAMENull() {
                this[this.tableDD_ITEM_INDEXES.INDEX_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINDEX_VALUENull() {
                return this.IsNull(this.tableDD_ITEM_INDEXES.INDEX_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINDEX_VALUENull() {
                this[this.tableDD_ITEM_INDEXES.INDEX_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_INDEX_NAMENull() {
                return this.IsNull(this.tableDD_ITEM_INDEXES.FNP8_INDEX_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_INDEX_NAMENull() {
                this[this.tableDD_ITEM_INDEXES.FNP8_INDEX_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DD_ITEMRowChangeEvent : global::System.EventArgs {
            
            private DD_ITEMRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMRowChangeEvent(DD_ITEMRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEMRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DD_ITEM_INDEXESRowChangeEvent : global::System.EventArgs {
            
            private DD_ITEM_INDEXESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESRowChangeEvent(DD_ITEM_INDEXESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_ITEM_INDEXESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591