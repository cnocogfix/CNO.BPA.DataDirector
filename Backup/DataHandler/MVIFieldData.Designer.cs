//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5477
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace CNO.BPA.DataHandler {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MVIFieldData")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MVIFieldData : global::System.Data.DataSet {
        
        private DD_MVI_FIELD_CHOICESDataTable tableDD_MVI_FIELD_CHOICES;
        
        private DD_MVI_FIELD_CONDITIONSDataTable tableDD_MVI_FIELD_CONDITIONS;
        
        private DD_MVI_FIELD_DEFINITIONDataTable tableDD_MVI_FIELD_DEFINITION;
        
        private DD_MVI_AWD_LOB_DEFINITIONDataTable tableDD_MVI_AWD_LOB_DEFINITION;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MVIFieldData() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MVIFieldData(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DD_MVI_FIELD_CHOICES"] != null)) {
                    base.Tables.Add(new DD_MVI_FIELD_CHOICESDataTable(ds.Tables["DD_MVI_FIELD_CHOICES"]));
                }
                if ((ds.Tables["DD_MVI_FIELD_CONDITIONS"] != null)) {
                    base.Tables.Add(new DD_MVI_FIELD_CONDITIONSDataTable(ds.Tables["DD_MVI_FIELD_CONDITIONS"]));
                }
                if ((ds.Tables["DD_MVI_FIELD_DEFINITION"] != null)) {
                    base.Tables.Add(new DD_MVI_FIELD_DEFINITIONDataTable(ds.Tables["DD_MVI_FIELD_DEFINITION"]));
                }
                if ((ds.Tables["DD_MVI_AWD_LOB_DEFINITION"] != null)) {
                    base.Tables.Add(new DD_MVI_AWD_LOB_DEFINITIONDataTable(ds.Tables["DD_MVI_AWD_LOB_DEFINITION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DD_MVI_FIELD_CHOICESDataTable DD_MVI_FIELD_CHOICES {
            get {
                return this.tableDD_MVI_FIELD_CHOICES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DD_MVI_FIELD_CONDITIONSDataTable DD_MVI_FIELD_CONDITIONS {
            get {
                return this.tableDD_MVI_FIELD_CONDITIONS;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DD_MVI_FIELD_DEFINITIONDataTable DD_MVI_FIELD_DEFINITION {
            get {
                return this.tableDD_MVI_FIELD_DEFINITION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DD_MVI_AWD_LOB_DEFINITIONDataTable DD_MVI_AWD_LOB_DEFINITION {
            get {
                return this.tableDD_MVI_AWD_LOB_DEFINITION;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MVIFieldData cln = ((MVIFieldData)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DD_MVI_FIELD_CHOICES"] != null)) {
                    base.Tables.Add(new DD_MVI_FIELD_CHOICESDataTable(ds.Tables["DD_MVI_FIELD_CHOICES"]));
                }
                if ((ds.Tables["DD_MVI_FIELD_CONDITIONS"] != null)) {
                    base.Tables.Add(new DD_MVI_FIELD_CONDITIONSDataTable(ds.Tables["DD_MVI_FIELD_CONDITIONS"]));
                }
                if ((ds.Tables["DD_MVI_FIELD_DEFINITION"] != null)) {
                    base.Tables.Add(new DD_MVI_FIELD_DEFINITIONDataTable(ds.Tables["DD_MVI_FIELD_DEFINITION"]));
                }
                if ((ds.Tables["DD_MVI_AWD_LOB_DEFINITION"] != null)) {
                    base.Tables.Add(new DD_MVI_AWD_LOB_DEFINITIONDataTable(ds.Tables["DD_MVI_AWD_LOB_DEFINITION"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDD_MVI_FIELD_CHOICES = ((DD_MVI_FIELD_CHOICESDataTable)(base.Tables["DD_MVI_FIELD_CHOICES"]));
            if ((initTable == true)) {
                if ((this.tableDD_MVI_FIELD_CHOICES != null)) {
                    this.tableDD_MVI_FIELD_CHOICES.InitVars();
                }
            }
            this.tableDD_MVI_FIELD_CONDITIONS = ((DD_MVI_FIELD_CONDITIONSDataTable)(base.Tables["DD_MVI_FIELD_CONDITIONS"]));
            if ((initTable == true)) {
                if ((this.tableDD_MVI_FIELD_CONDITIONS != null)) {
                    this.tableDD_MVI_FIELD_CONDITIONS.InitVars();
                }
            }
            this.tableDD_MVI_FIELD_DEFINITION = ((DD_MVI_FIELD_DEFINITIONDataTable)(base.Tables["DD_MVI_FIELD_DEFINITION"]));
            if ((initTable == true)) {
                if ((this.tableDD_MVI_FIELD_DEFINITION != null)) {
                    this.tableDD_MVI_FIELD_DEFINITION.InitVars();
                }
            }
            this.tableDD_MVI_AWD_LOB_DEFINITION = ((DD_MVI_AWD_LOB_DEFINITIONDataTable)(base.Tables["DD_MVI_AWD_LOB_DEFINITION"]));
            if ((initTable == true)) {
                if ((this.tableDD_MVI_AWD_LOB_DEFINITION != null)) {
                    this.tableDD_MVI_AWD_LOB_DEFINITION.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MVIFieldData";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MVIFieldData.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDD_MVI_FIELD_CHOICES = new DD_MVI_FIELD_CHOICESDataTable();
            base.Tables.Add(this.tableDD_MVI_FIELD_CHOICES);
            this.tableDD_MVI_FIELD_CONDITIONS = new DD_MVI_FIELD_CONDITIONSDataTable();
            base.Tables.Add(this.tableDD_MVI_FIELD_CONDITIONS);
            this.tableDD_MVI_FIELD_DEFINITION = new DD_MVI_FIELD_DEFINITIONDataTable();
            base.Tables.Add(this.tableDD_MVI_FIELD_DEFINITION);
            this.tableDD_MVI_AWD_LOB_DEFINITION = new DD_MVI_AWD_LOB_DEFINITIONDataTable();
            base.Tables.Add(this.tableDD_MVI_AWD_LOB_DEFINITION);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDD_MVI_FIELD_CHOICES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDD_MVI_FIELD_CONDITIONS() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDD_MVI_FIELD_DEFINITION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDD_MVI_AWD_LOB_DEFINITION() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MVIFieldData ds = new MVIFieldData();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DD_MVI_FIELD_CHOICESRowChangeEventHandler(object sender, DD_MVI_FIELD_CHOICESRowChangeEvent e);
        
        public delegate void DD_MVI_FIELD_CONDITIONSRowChangeEventHandler(object sender, DD_MVI_FIELD_CONDITIONSRowChangeEvent e);
        
        public delegate void DD_MVI_FIELD_DEFINITIONRowChangeEventHandler(object sender, DD_MVI_FIELD_DEFINITIONRowChangeEvent e);
        
        public delegate void DD_MVI_AWD_LOB_DEFINITIONRowChangeEventHandler(object sender, DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DD_MVI_FIELD_CHOICESDataTable : global::System.Data.TypedTableBase<DD_MVI_FIELD_CHOICESRow> {
            
            private global::System.Data.DataColumn columnSITE_ID;
            
            private global::System.Data.DataColumn columnWORK_CATEGORY;
            
            private global::System.Data.DataColumn columnFIELD_NAME_PARENT_VALUE;
            
            private global::System.Data.DataColumn columnFIELD_NAME;
            
            private global::System.Data.DataColumn columnCHOICE_VALUE;
            
            private global::System.Data.DataColumn columnCHOICE_DISPLAY;
            
            private global::System.Data.DataColumn columnF_DOCCLASSNAME;
            
            private global::System.Data.DataColumn columnDOCUMENT_TYPE;
            
            private global::System.Data.DataColumn columnLINE_OF_BUSINESS;
            
            private global::System.Data.DataColumn columnDEFAULT_CHOICE;
            
            private global::System.Data.DataColumn columnFNP8_DOCCLASSNAME;
            
            private global::System.Data.DataColumn columnFNP8_OBJECTSTORE;
            
            private global::System.Data.DataColumn columnFNP8_FOLDER;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESDataTable() {
                this.TableName = "DD_MVI_FIELD_CHOICES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_FIELD_CHOICESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DD_MVI_FIELD_CHOICESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITE_IDColumn {
                get {
                    return this.columnSITE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WORK_CATEGORYColumn {
                get {
                    return this.columnWORK_CATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_NAME_PARENT_VALUEColumn {
                get {
                    return this.columnFIELD_NAME_PARENT_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_NAMEColumn {
                get {
                    return this.columnFIELD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHOICE_VALUEColumn {
                get {
                    return this.columnCHOICE_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CHOICE_DISPLAYColumn {
                get {
                    return this.columnCHOICE_DISPLAY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn F_DOCCLASSNAMEColumn {
                get {
                    return this.columnF_DOCCLASSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOCUMENT_TYPEColumn {
                get {
                    return this.columnDOCUMENT_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LINE_OF_BUSINESSColumn {
                get {
                    return this.columnLINE_OF_BUSINESS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFAULT_CHOICEColumn {
                get {
                    return this.columnDEFAULT_CHOICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_DOCCLASSNAMEColumn {
                get {
                    return this.columnFNP8_DOCCLASSNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_OBJECTSTOREColumn {
                get {
                    return this.columnFNP8_OBJECTSTORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_FOLDERColumn {
                get {
                    return this.columnFNP8_FOLDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESRow this[int index] {
                get {
                    return ((DD_MVI_FIELD_CHOICESRow)(this.Rows[index]));
                }
            }
            
            public event DD_MVI_FIELD_CHOICESRowChangeEventHandler DD_MVI_FIELD_CHOICESRowChanging;
            
            public event DD_MVI_FIELD_CHOICESRowChangeEventHandler DD_MVI_FIELD_CHOICESRowChanged;
            
            public event DD_MVI_FIELD_CHOICESRowChangeEventHandler DD_MVI_FIELD_CHOICESRowDeleting;
            
            public event DD_MVI_FIELD_CHOICESRowChangeEventHandler DD_MVI_FIELD_CHOICESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDD_MVI_FIELD_CHOICESRow(DD_MVI_FIELD_CHOICESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESRow AddDD_MVI_FIELD_CHOICESRow(string SITE_ID, string WORK_CATEGORY, string FIELD_NAME_PARENT_VALUE, string FIELD_NAME, string CHOICE_VALUE, string CHOICE_DISPLAY, string F_DOCCLASSNAME, string DOCUMENT_TYPE, string LINE_OF_BUSINESS, string DEFAULT_CHOICE, string FNP8_DOCCLASSNAME, string FNP8_OBJECTSTORE, string FNP8_FOLDER) {
                DD_MVI_FIELD_CHOICESRow rowDD_MVI_FIELD_CHOICESRow = ((DD_MVI_FIELD_CHOICESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SITE_ID,
                        WORK_CATEGORY,
                        FIELD_NAME_PARENT_VALUE,
                        FIELD_NAME,
                        CHOICE_VALUE,
                        CHOICE_DISPLAY,
                        F_DOCCLASSNAME,
                        DOCUMENT_TYPE,
                        LINE_OF_BUSINESS,
                        DEFAULT_CHOICE,
                        FNP8_DOCCLASSNAME,
                        FNP8_OBJECTSTORE,
                        FNP8_FOLDER};
                rowDD_MVI_FIELD_CHOICESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDD_MVI_FIELD_CHOICESRow);
                return rowDD_MVI_FIELD_CHOICESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESRow FindBySITE_IDWORK_CATEGORYFIELD_NAME_PARENT_VALUEFIELD_NAMECHOICE_VALUE(string SITE_ID, string WORK_CATEGORY, string FIELD_NAME_PARENT_VALUE, string FIELD_NAME, string CHOICE_VALUE) {
                return ((DD_MVI_FIELD_CHOICESRow)(this.Rows.Find(new object[] {
                            SITE_ID,
                            WORK_CATEGORY,
                            FIELD_NAME_PARENT_VALUE,
                            FIELD_NAME,
                            CHOICE_VALUE})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DD_MVI_FIELD_CHOICESDataTable cln = ((DD_MVI_FIELD_CHOICESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DD_MVI_FIELD_CHOICESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSITE_ID = base.Columns["SITE_ID"];
                this.columnWORK_CATEGORY = base.Columns["WORK_CATEGORY"];
                this.columnFIELD_NAME_PARENT_VALUE = base.Columns["FIELD_NAME_PARENT_VALUE"];
                this.columnFIELD_NAME = base.Columns["FIELD_NAME"];
                this.columnCHOICE_VALUE = base.Columns["CHOICE_VALUE"];
                this.columnCHOICE_DISPLAY = base.Columns["CHOICE_DISPLAY"];
                this.columnF_DOCCLASSNAME = base.Columns["F_DOCCLASSNAME"];
                this.columnDOCUMENT_TYPE = base.Columns["DOCUMENT_TYPE"];
                this.columnLINE_OF_BUSINESS = base.Columns["LINE_OF_BUSINESS"];
                this.columnDEFAULT_CHOICE = base.Columns["DEFAULT_CHOICE"];
                this.columnFNP8_DOCCLASSNAME = base.Columns["FNP8_DOCCLASSNAME"];
                this.columnFNP8_OBJECTSTORE = base.Columns["FNP8_OBJECTSTORE"];
                this.columnFNP8_FOLDER = base.Columns["FNP8_FOLDER"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSITE_ID = new global::System.Data.DataColumn("SITE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_ID);
                this.columnWORK_CATEGORY = new global::System.Data.DataColumn("WORK_CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWORK_CATEGORY);
                this.columnFIELD_NAME_PARENT_VALUE = new global::System.Data.DataColumn("FIELD_NAME_PARENT_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_NAME_PARENT_VALUE);
                this.columnFIELD_NAME = new global::System.Data.DataColumn("FIELD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_NAME);
                this.columnCHOICE_VALUE = new global::System.Data.DataColumn("CHOICE_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHOICE_VALUE);
                this.columnCHOICE_DISPLAY = new global::System.Data.DataColumn("CHOICE_DISPLAY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCHOICE_DISPLAY);
                this.columnF_DOCCLASSNAME = new global::System.Data.DataColumn("F_DOCCLASSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnF_DOCCLASSNAME);
                this.columnDOCUMENT_TYPE = new global::System.Data.DataColumn("DOCUMENT_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOCUMENT_TYPE);
                this.columnLINE_OF_BUSINESS = new global::System.Data.DataColumn("LINE_OF_BUSINESS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLINE_OF_BUSINESS);
                this.columnDEFAULT_CHOICE = new global::System.Data.DataColumn("DEFAULT_CHOICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFAULT_CHOICE);
                this.columnFNP8_DOCCLASSNAME = new global::System.Data.DataColumn("FNP8_DOCCLASSNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_DOCCLASSNAME);
                this.columnFNP8_OBJECTSTORE = new global::System.Data.DataColumn("FNP8_OBJECTSTORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_OBJECTSTORE);
                this.columnFNP8_FOLDER = new global::System.Data.DataColumn("FNP8_FOLDER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_FOLDER);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSITE_ID,
                                this.columnWORK_CATEGORY,
                                this.columnFIELD_NAME_PARENT_VALUE,
                                this.columnFIELD_NAME,
                                this.columnCHOICE_VALUE}, true));
                this.columnSITE_ID.AllowDBNull = false;
                this.columnWORK_CATEGORY.AllowDBNull = false;
                this.columnFIELD_NAME_PARENT_VALUE.AllowDBNull = false;
                this.columnFIELD_NAME.AllowDBNull = false;
                this.columnCHOICE_VALUE.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESRow NewDD_MVI_FIELD_CHOICESRow() {
                return ((DD_MVI_FIELD_CHOICESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DD_MVI_FIELD_CHOICESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DD_MVI_FIELD_CHOICESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DD_MVI_FIELD_CHOICESRowChanged != null)) {
                    this.DD_MVI_FIELD_CHOICESRowChanged(this, new DD_MVI_FIELD_CHOICESRowChangeEvent(((DD_MVI_FIELD_CHOICESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DD_MVI_FIELD_CHOICESRowChanging != null)) {
                    this.DD_MVI_FIELD_CHOICESRowChanging(this, new DD_MVI_FIELD_CHOICESRowChangeEvent(((DD_MVI_FIELD_CHOICESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DD_MVI_FIELD_CHOICESRowDeleted != null)) {
                    this.DD_MVI_FIELD_CHOICESRowDeleted(this, new DD_MVI_FIELD_CHOICESRowChangeEvent(((DD_MVI_FIELD_CHOICESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DD_MVI_FIELD_CHOICESRowDeleting != null)) {
                    this.DD_MVI_FIELD_CHOICESRowDeleting(this, new DD_MVI_FIELD_CHOICESRowChangeEvent(((DD_MVI_FIELD_CHOICESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDD_MVI_FIELD_CHOICESRow(DD_MVI_FIELD_CHOICESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MVIFieldData ds = new MVIFieldData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DD_MVI_FIELD_CHOICESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DD_MVI_FIELD_CONDITIONSDataTable : global::System.Data.TypedTableBase<DD_MVI_FIELD_CONDITIONSRow> {
            
            private global::System.Data.DataColumn columnSITE_ID;
            
            private global::System.Data.DataColumn columnWORK_CATEGORY;
            
            private global::System.Data.DataColumn columnFIELD_NAME;
            
            private global::System.Data.DataColumn columnFIELD_VALUE;
            
            private global::System.Data.DataColumn columnCONDITIONAL_FIELD_NAME;
            
            private global::System.Data.DataColumn columnCONDITIONAL_FIELD_VALUE;
            
            private global::System.Data.DataColumn columnCONDITIONAL_OPERATOR;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CONDITIONSDataTable() {
                this.TableName = "DD_MVI_FIELD_CONDITIONS";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_FIELD_CONDITIONSDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DD_MVI_FIELD_CONDITIONSDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITE_IDColumn {
                get {
                    return this.columnSITE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WORK_CATEGORYColumn {
                get {
                    return this.columnWORK_CATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_NAMEColumn {
                get {
                    return this.columnFIELD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_VALUEColumn {
                get {
                    return this.columnFIELD_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONDITIONAL_FIELD_NAMEColumn {
                get {
                    return this.columnCONDITIONAL_FIELD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONDITIONAL_FIELD_VALUEColumn {
                get {
                    return this.columnCONDITIONAL_FIELD_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONDITIONAL_OPERATORColumn {
                get {
                    return this.columnCONDITIONAL_OPERATOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CONDITIONSRow this[int index] {
                get {
                    return ((DD_MVI_FIELD_CONDITIONSRow)(this.Rows[index]));
                }
            }
            
            public event DD_MVI_FIELD_CONDITIONSRowChangeEventHandler DD_MVI_FIELD_CONDITIONSRowChanging;
            
            public event DD_MVI_FIELD_CONDITIONSRowChangeEventHandler DD_MVI_FIELD_CONDITIONSRowChanged;
            
            public event DD_MVI_FIELD_CONDITIONSRowChangeEventHandler DD_MVI_FIELD_CONDITIONSRowDeleting;
            
            public event DD_MVI_FIELD_CONDITIONSRowChangeEventHandler DD_MVI_FIELD_CONDITIONSRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDD_MVI_FIELD_CONDITIONSRow(DD_MVI_FIELD_CONDITIONSRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CONDITIONSRow AddDD_MVI_FIELD_CONDITIONSRow(string SITE_ID, string WORK_CATEGORY, string FIELD_NAME, string FIELD_VALUE, string CONDITIONAL_FIELD_NAME, string CONDITIONAL_FIELD_VALUE, string CONDITIONAL_OPERATOR) {
                DD_MVI_FIELD_CONDITIONSRow rowDD_MVI_FIELD_CONDITIONSRow = ((DD_MVI_FIELD_CONDITIONSRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SITE_ID,
                        WORK_CATEGORY,
                        FIELD_NAME,
                        FIELD_VALUE,
                        CONDITIONAL_FIELD_NAME,
                        CONDITIONAL_FIELD_VALUE,
                        CONDITIONAL_OPERATOR};
                rowDD_MVI_FIELD_CONDITIONSRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDD_MVI_FIELD_CONDITIONSRow);
                return rowDD_MVI_FIELD_CONDITIONSRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DD_MVI_FIELD_CONDITIONSDataTable cln = ((DD_MVI_FIELD_CONDITIONSDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DD_MVI_FIELD_CONDITIONSDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSITE_ID = base.Columns["SITE_ID"];
                this.columnWORK_CATEGORY = base.Columns["WORK_CATEGORY"];
                this.columnFIELD_NAME = base.Columns["FIELD_NAME"];
                this.columnFIELD_VALUE = base.Columns["FIELD_VALUE"];
                this.columnCONDITIONAL_FIELD_NAME = base.Columns["CONDITIONAL_FIELD_NAME"];
                this.columnCONDITIONAL_FIELD_VALUE = base.Columns["CONDITIONAL_FIELD_VALUE"];
                this.columnCONDITIONAL_OPERATOR = base.Columns["CONDITIONAL_OPERATOR"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSITE_ID = new global::System.Data.DataColumn("SITE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_ID);
                this.columnWORK_CATEGORY = new global::System.Data.DataColumn("WORK_CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWORK_CATEGORY);
                this.columnFIELD_NAME = new global::System.Data.DataColumn("FIELD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_NAME);
                this.columnFIELD_VALUE = new global::System.Data.DataColumn("FIELD_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_VALUE);
                this.columnCONDITIONAL_FIELD_NAME = new global::System.Data.DataColumn("CONDITIONAL_FIELD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONDITIONAL_FIELD_NAME);
                this.columnCONDITIONAL_FIELD_VALUE = new global::System.Data.DataColumn("CONDITIONAL_FIELD_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONDITIONAL_FIELD_VALUE);
                this.columnCONDITIONAL_OPERATOR = new global::System.Data.DataColumn("CONDITIONAL_OPERATOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONDITIONAL_OPERATOR);
                this.columnSITE_ID.AllowDBNull = false;
                this.columnWORK_CATEGORY.AllowDBNull = false;
                this.columnFIELD_NAME.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CONDITIONSRow NewDD_MVI_FIELD_CONDITIONSRow() {
                return ((DD_MVI_FIELD_CONDITIONSRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DD_MVI_FIELD_CONDITIONSRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DD_MVI_FIELD_CONDITIONSRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DD_MVI_FIELD_CONDITIONSRowChanged != null)) {
                    this.DD_MVI_FIELD_CONDITIONSRowChanged(this, new DD_MVI_FIELD_CONDITIONSRowChangeEvent(((DD_MVI_FIELD_CONDITIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DD_MVI_FIELD_CONDITIONSRowChanging != null)) {
                    this.DD_MVI_FIELD_CONDITIONSRowChanging(this, new DD_MVI_FIELD_CONDITIONSRowChangeEvent(((DD_MVI_FIELD_CONDITIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DD_MVI_FIELD_CONDITIONSRowDeleted != null)) {
                    this.DD_MVI_FIELD_CONDITIONSRowDeleted(this, new DD_MVI_FIELD_CONDITIONSRowChangeEvent(((DD_MVI_FIELD_CONDITIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DD_MVI_FIELD_CONDITIONSRowDeleting != null)) {
                    this.DD_MVI_FIELD_CONDITIONSRowDeleting(this, new DD_MVI_FIELD_CONDITIONSRowChangeEvent(((DD_MVI_FIELD_CONDITIONSRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDD_MVI_FIELD_CONDITIONSRow(DD_MVI_FIELD_CONDITIONSRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MVIFieldData ds = new MVIFieldData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DD_MVI_FIELD_CONDITIONSDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DD_MVI_FIELD_DEFINITIONDataTable : global::System.Data.TypedTableBase<DD_MVI_FIELD_DEFINITIONRow> {
            
            private global::System.Data.DataColumn columnSITE_ID;
            
            private global::System.Data.DataColumn columnWORK_CATEGORY;
            
            private global::System.Data.DataColumn columnFIELD_NAME;
            
            private global::System.Data.DataColumn columnFIELD_LABEL;
            
            private global::System.Data.DataColumn columnFN_PROP_NAME;
            
            private global::System.Data.DataColumn columnSP_PARAM_NAME;
            
            private global::System.Data.DataColumn columnIA_MDF_NAME;
            
            private global::System.Data.DataColumn columnDEFAULT_VALUE;
            
            private global::System.Data.DataColumn columnFIELD_ORDER;
            
            private global::System.Data.DataColumn columnLOCATION;
            
            private global::System.Data.DataColumn columnVISIBLE;
            
            private global::System.Data.DataColumn columnREQUIRED;
            
            private global::System.Data.DataColumn columnCONDITIONAL;
            
            private global::System.Data.DataColumn columnLOCKED;
            
            private global::System.Data.DataColumn columnREMEMBER_VALUES;
            
            private global::System.Data.DataColumn columnMAX_LENGTH;
            
            private global::System.Data.DataColumn columnVALIDATION;
            
            private global::System.Data.DataColumn columnFIELD_TYPE;
            
            private global::System.Data.DataColumn columnFIELD_NAME_PARENT;
            
            private global::System.Data.DataColumn columnLOCAL_VALUE;
            
            private global::System.Data.DataColumn columnMASK;
            
            private global::System.Data.DataColumn columnREMEMBER_VALUES_CHECKED;
            
            private global::System.Data.DataColumn columnFN_DATE;
            
            private global::System.Data.DataColumn columnFO_PARAM_NAME;
            
            private global::System.Data.DataColumn columnTP_PARAM_NAME;
            
            private global::System.Data.DataColumn columnFNP8_PROP_NAME;
            
            private global::System.Data.DataColumn columnINVOICE_PARAM_NAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONDataTable() {
                this.TableName = "DD_MVI_FIELD_DEFINITION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_FIELD_DEFINITIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DD_MVI_FIELD_DEFINITIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITE_IDColumn {
                get {
                    return this.columnSITE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WORK_CATEGORYColumn {
                get {
                    return this.columnWORK_CATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_NAMEColumn {
                get {
                    return this.columnFIELD_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_LABELColumn {
                get {
                    return this.columnFIELD_LABEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FN_PROP_NAMEColumn {
                get {
                    return this.columnFN_PROP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SP_PARAM_NAMEColumn {
                get {
                    return this.columnSP_PARAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IA_MDF_NAMEColumn {
                get {
                    return this.columnIA_MDF_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEFAULT_VALUEColumn {
                get {
                    return this.columnDEFAULT_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_ORDERColumn {
                get {
                    return this.columnFIELD_ORDER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCATIONColumn {
                get {
                    return this.columnLOCATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VISIBLEColumn {
                get {
                    return this.columnVISIBLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REQUIREDColumn {
                get {
                    return this.columnREQUIRED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CONDITIONALColumn {
                get {
                    return this.columnCONDITIONAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCKEDColumn {
                get {
                    return this.columnLOCKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REMEMBER_VALUESColumn {
                get {
                    return this.columnREMEMBER_VALUES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MAX_LENGTHColumn {
                get {
                    return this.columnMAX_LENGTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VALIDATIONColumn {
                get {
                    return this.columnVALIDATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_TYPEColumn {
                get {
                    return this.columnFIELD_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FIELD_NAME_PARENTColumn {
                get {
                    return this.columnFIELD_NAME_PARENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOCAL_VALUEColumn {
                get {
                    return this.columnLOCAL_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MASKColumn {
                get {
                    return this.columnMASK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REMEMBER_VALUES_CHECKEDColumn {
                get {
                    return this.columnREMEMBER_VALUES_CHECKED;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FN_DATEColumn {
                get {
                    return this.columnFN_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FO_PARAM_NAMEColumn {
                get {
                    return this.columnFO_PARAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TP_PARAM_NAMEColumn {
                get {
                    return this.columnTP_PARAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNP8_PROP_NAMEColumn {
                get {
                    return this.columnFNP8_PROP_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INVOICE_PARAM_NAMEColumn {
                get {
                    return this.columnINVOICE_PARAM_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONRow this[int index] {
                get {
                    return ((DD_MVI_FIELD_DEFINITIONRow)(this.Rows[index]));
                }
            }
            
            public event DD_MVI_FIELD_DEFINITIONRowChangeEventHandler DD_MVI_FIELD_DEFINITIONRowChanging;
            
            public event DD_MVI_FIELD_DEFINITIONRowChangeEventHandler DD_MVI_FIELD_DEFINITIONRowChanged;
            
            public event DD_MVI_FIELD_DEFINITIONRowChangeEventHandler DD_MVI_FIELD_DEFINITIONRowDeleting;
            
            public event DD_MVI_FIELD_DEFINITIONRowChangeEventHandler DD_MVI_FIELD_DEFINITIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDD_MVI_FIELD_DEFINITIONRow(DD_MVI_FIELD_DEFINITIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONRow AddDD_MVI_FIELD_DEFINITIONRow(
                        string SITE_ID, 
                        string WORK_CATEGORY, 
                        string FIELD_NAME, 
                        string FIELD_LABEL, 
                        string FN_PROP_NAME, 
                        string SP_PARAM_NAME, 
                        string IA_MDF_NAME, 
                        string DEFAULT_VALUE, 
                        int FIELD_ORDER, 
                        string LOCATION, 
                        string VISIBLE, 
                        string REQUIRED, 
                        string CONDITIONAL, 
                        string LOCKED, 
                        string REMEMBER_VALUES, 
                        string MAX_LENGTH, 
                        string VALIDATION, 
                        string FIELD_TYPE, 
                        string FIELD_NAME_PARENT, 
                        string LOCAL_VALUE, 
                        string MASK, 
                        string REMEMBER_VALUES_CHECKED, 
                        string FN_DATE, 
                        string FO_PARAM_NAME, 
                        string TP_PARAM_NAME, 
                        string FNP8_PROP_NAME, 
                        string INVOICE_PARAM_NAME) {
                DD_MVI_FIELD_DEFINITIONRow rowDD_MVI_FIELD_DEFINITIONRow = ((DD_MVI_FIELD_DEFINITIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SITE_ID,
                        WORK_CATEGORY,
                        FIELD_NAME,
                        FIELD_LABEL,
                        FN_PROP_NAME,
                        SP_PARAM_NAME,
                        IA_MDF_NAME,
                        DEFAULT_VALUE,
                        FIELD_ORDER,
                        LOCATION,
                        VISIBLE,
                        REQUIRED,
                        CONDITIONAL,
                        LOCKED,
                        REMEMBER_VALUES,
                        MAX_LENGTH,
                        VALIDATION,
                        FIELD_TYPE,
                        FIELD_NAME_PARENT,
                        LOCAL_VALUE,
                        MASK,
                        REMEMBER_VALUES_CHECKED,
                        FN_DATE,
                        FO_PARAM_NAME,
                        TP_PARAM_NAME,
                        FNP8_PROP_NAME,
                        INVOICE_PARAM_NAME};
                rowDD_MVI_FIELD_DEFINITIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDD_MVI_FIELD_DEFINITIONRow);
                return rowDD_MVI_FIELD_DEFINITIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONRow FindBySITE_IDWORK_CATEGORYFIELD_NAME(string SITE_ID, string WORK_CATEGORY, string FIELD_NAME) {
                return ((DD_MVI_FIELD_DEFINITIONRow)(this.Rows.Find(new object[] {
                            SITE_ID,
                            WORK_CATEGORY,
                            FIELD_NAME})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DD_MVI_FIELD_DEFINITIONDataTable cln = ((DD_MVI_FIELD_DEFINITIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DD_MVI_FIELD_DEFINITIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSITE_ID = base.Columns["SITE_ID"];
                this.columnWORK_CATEGORY = base.Columns["WORK_CATEGORY"];
                this.columnFIELD_NAME = base.Columns["FIELD_NAME"];
                this.columnFIELD_LABEL = base.Columns["FIELD_LABEL"];
                this.columnFN_PROP_NAME = base.Columns["FN_PROP_NAME"];
                this.columnSP_PARAM_NAME = base.Columns["SP_PARAM_NAME"];
                this.columnIA_MDF_NAME = base.Columns["IA_MDF_NAME"];
                this.columnDEFAULT_VALUE = base.Columns["DEFAULT_VALUE"];
                this.columnFIELD_ORDER = base.Columns["FIELD_ORDER"];
                this.columnLOCATION = base.Columns["LOCATION"];
                this.columnVISIBLE = base.Columns["VISIBLE"];
                this.columnREQUIRED = base.Columns["REQUIRED"];
                this.columnCONDITIONAL = base.Columns["CONDITIONAL"];
                this.columnLOCKED = base.Columns["LOCKED"];
                this.columnREMEMBER_VALUES = base.Columns["REMEMBER_VALUES"];
                this.columnMAX_LENGTH = base.Columns["MAX_LENGTH"];
                this.columnVALIDATION = base.Columns["VALIDATION"];
                this.columnFIELD_TYPE = base.Columns["FIELD_TYPE"];
                this.columnFIELD_NAME_PARENT = base.Columns["FIELD_NAME_PARENT"];
                this.columnLOCAL_VALUE = base.Columns["LOCAL_VALUE"];
                this.columnMASK = base.Columns["MASK"];
                this.columnREMEMBER_VALUES_CHECKED = base.Columns["REMEMBER_VALUES_CHECKED"];
                this.columnFN_DATE = base.Columns["FN_DATE"];
                this.columnFO_PARAM_NAME = base.Columns["FO_PARAM_NAME"];
                this.columnTP_PARAM_NAME = base.Columns["TP_PARAM_NAME"];
                this.columnFNP8_PROP_NAME = base.Columns["FNP8_PROP_NAME"];
                this.columnINVOICE_PARAM_NAME = base.Columns["INVOICE_PARAM_NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSITE_ID = new global::System.Data.DataColumn("SITE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_ID);
                this.columnWORK_CATEGORY = new global::System.Data.DataColumn("WORK_CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWORK_CATEGORY);
                this.columnFIELD_NAME = new global::System.Data.DataColumn("FIELD_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_NAME);
                this.columnFIELD_LABEL = new global::System.Data.DataColumn("FIELD_LABEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_LABEL);
                this.columnFN_PROP_NAME = new global::System.Data.DataColumn("FN_PROP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFN_PROP_NAME);
                this.columnSP_PARAM_NAME = new global::System.Data.DataColumn("SP_PARAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSP_PARAM_NAME);
                this.columnIA_MDF_NAME = new global::System.Data.DataColumn("IA_MDF_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIA_MDF_NAME);
                this.columnDEFAULT_VALUE = new global::System.Data.DataColumn("DEFAULT_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEFAULT_VALUE);
                this.columnFIELD_ORDER = new global::System.Data.DataColumn("FIELD_ORDER", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_ORDER);
                this.columnLOCATION = new global::System.Data.DataColumn("LOCATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCATION);
                this.columnVISIBLE = new global::System.Data.DataColumn("VISIBLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVISIBLE);
                this.columnREQUIRED = new global::System.Data.DataColumn("REQUIRED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREQUIRED);
                this.columnCONDITIONAL = new global::System.Data.DataColumn("CONDITIONAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCONDITIONAL);
                this.columnLOCKED = new global::System.Data.DataColumn("LOCKED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCKED);
                this.columnREMEMBER_VALUES = new global::System.Data.DataColumn("REMEMBER_VALUES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMEMBER_VALUES);
                this.columnMAX_LENGTH = new global::System.Data.DataColumn("MAX_LENGTH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMAX_LENGTH);
                this.columnVALIDATION = new global::System.Data.DataColumn("VALIDATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVALIDATION);
                this.columnFIELD_TYPE = new global::System.Data.DataColumn("FIELD_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_TYPE);
                this.columnFIELD_NAME_PARENT = new global::System.Data.DataColumn("FIELD_NAME_PARENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFIELD_NAME_PARENT);
                this.columnLOCAL_VALUE = new global::System.Data.DataColumn("LOCAL_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOCAL_VALUE);
                this.columnMASK = new global::System.Data.DataColumn("MASK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMASK);
                this.columnREMEMBER_VALUES_CHECKED = new global::System.Data.DataColumn("REMEMBER_VALUES_CHECKED", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREMEMBER_VALUES_CHECKED);
                this.columnFN_DATE = new global::System.Data.DataColumn("FN_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFN_DATE);
                this.columnFO_PARAM_NAME = new global::System.Data.DataColumn("FO_PARAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFO_PARAM_NAME);
                this.columnTP_PARAM_NAME = new global::System.Data.DataColumn("TP_PARAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTP_PARAM_NAME);
                this.columnFNP8_PROP_NAME = new global::System.Data.DataColumn("FNP8_PROP_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNP8_PROP_NAME);
                this.columnINVOICE_PARAM_NAME = new global::System.Data.DataColumn("INVOICE_PARAM_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINVOICE_PARAM_NAME);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSITE_ID,
                                this.columnWORK_CATEGORY,
                                this.columnFIELD_NAME}, true));
                this.columnSITE_ID.AllowDBNull = false;
                this.columnWORK_CATEGORY.AllowDBNull = false;
                this.columnFIELD_NAME.AllowDBNull = false;
                this.columnREMEMBER_VALUES_CHECKED.DefaultValue = ((string)("F"));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONRow NewDD_MVI_FIELD_DEFINITIONRow() {
                return ((DD_MVI_FIELD_DEFINITIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DD_MVI_FIELD_DEFINITIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DD_MVI_FIELD_DEFINITIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DD_MVI_FIELD_DEFINITIONRowChanged != null)) {
                    this.DD_MVI_FIELD_DEFINITIONRowChanged(this, new DD_MVI_FIELD_DEFINITIONRowChangeEvent(((DD_MVI_FIELD_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DD_MVI_FIELD_DEFINITIONRowChanging != null)) {
                    this.DD_MVI_FIELD_DEFINITIONRowChanging(this, new DD_MVI_FIELD_DEFINITIONRowChangeEvent(((DD_MVI_FIELD_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DD_MVI_FIELD_DEFINITIONRowDeleted != null)) {
                    this.DD_MVI_FIELD_DEFINITIONRowDeleted(this, new DD_MVI_FIELD_DEFINITIONRowChangeEvent(((DD_MVI_FIELD_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DD_MVI_FIELD_DEFINITIONRowDeleting != null)) {
                    this.DD_MVI_FIELD_DEFINITIONRowDeleting(this, new DD_MVI_FIELD_DEFINITIONRowChangeEvent(((DD_MVI_FIELD_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDD_MVI_FIELD_DEFINITIONRow(DD_MVI_FIELD_DEFINITIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MVIFieldData ds = new MVIFieldData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DD_MVI_FIELD_DEFINITIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DD_MVI_AWD_LOB_DEFINITIONDataTable : global::System.Data.TypedTableBase<DD_MVI_AWD_LOB_DEFINITIONRow> {
            
            private global::System.Data.DataColumn columnSITE_ID;
            
            private global::System.Data.DataColumn columnWORK_CATEGORY;
            
            private global::System.Data.DataColumn columnLOB_NAME;
            
            private global::System.Data.DataColumn columnLOB_LEVEL;
            
            private global::System.Data.DataColumn columnSOURCE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONDataTable() {
                this.TableName = "DD_MVI_AWD_LOB_DEFINITION";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_AWD_LOB_DEFINITIONDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DD_MVI_AWD_LOB_DEFINITIONDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SITE_IDColumn {
                get {
                    return this.columnSITE_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WORK_CATEGORYColumn {
                get {
                    return this.columnWORK_CATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOB_NAMEColumn {
                get {
                    return this.columnLOB_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LOB_LEVELColumn {
                get {
                    return this.columnLOB_LEVEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SOURCEColumn {
                get {
                    return this.columnSOURCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONRow this[int index] {
                get {
                    return ((DD_MVI_AWD_LOB_DEFINITIONRow)(this.Rows[index]));
                }
            }
            
            public event DD_MVI_AWD_LOB_DEFINITIONRowChangeEventHandler DD_MVI_AWD_LOB_DEFINITIONRowChanging;
            
            public event DD_MVI_AWD_LOB_DEFINITIONRowChangeEventHandler DD_MVI_AWD_LOB_DEFINITIONRowChanged;
            
            public event DD_MVI_AWD_LOB_DEFINITIONRowChangeEventHandler DD_MVI_AWD_LOB_DEFINITIONRowDeleting;
            
            public event DD_MVI_AWD_LOB_DEFINITIONRowChangeEventHandler DD_MVI_AWD_LOB_DEFINITIONRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDD_MVI_AWD_LOB_DEFINITIONRow(DD_MVI_AWD_LOB_DEFINITIONRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONRow AddDD_MVI_AWD_LOB_DEFINITIONRow(string SITE_ID, string WORK_CATEGORY, string LOB_NAME, string LOB_LEVEL, string SOURCE) {
                DD_MVI_AWD_LOB_DEFINITIONRow rowDD_MVI_AWD_LOB_DEFINITIONRow = ((DD_MVI_AWD_LOB_DEFINITIONRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SITE_ID,
                        WORK_CATEGORY,
                        LOB_NAME,
                        LOB_LEVEL,
                        SOURCE};
                rowDD_MVI_AWD_LOB_DEFINITIONRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDD_MVI_AWD_LOB_DEFINITIONRow);
                return rowDD_MVI_AWD_LOB_DEFINITIONRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONRow FindBySITE_IDLOB_LEVELLOB_NAMEWORK_CATEGORY(string SITE_ID, string LOB_LEVEL, string LOB_NAME, string WORK_CATEGORY) {
                return ((DD_MVI_AWD_LOB_DEFINITIONRow)(this.Rows.Find(new object[] {
                            SITE_ID,
                            LOB_LEVEL,
                            LOB_NAME,
                            WORK_CATEGORY})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DD_MVI_AWD_LOB_DEFINITIONDataTable cln = ((DD_MVI_AWD_LOB_DEFINITIONDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DD_MVI_AWD_LOB_DEFINITIONDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSITE_ID = base.Columns["SITE_ID"];
                this.columnWORK_CATEGORY = base.Columns["WORK_CATEGORY"];
                this.columnLOB_NAME = base.Columns["LOB_NAME"];
                this.columnLOB_LEVEL = base.Columns["LOB_LEVEL"];
                this.columnSOURCE = base.Columns["SOURCE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSITE_ID = new global::System.Data.DataColumn("SITE_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSITE_ID);
                this.columnWORK_CATEGORY = new global::System.Data.DataColumn("WORK_CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWORK_CATEGORY);
                this.columnLOB_NAME = new global::System.Data.DataColumn("LOB_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOB_NAME);
                this.columnLOB_LEVEL = new global::System.Data.DataColumn("LOB_LEVEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLOB_LEVEL);
                this.columnSOURCE = new global::System.Data.DataColumn("SOURCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSOURCE);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSITE_ID,
                                this.columnLOB_LEVEL,
                                this.columnLOB_NAME,
                                this.columnWORK_CATEGORY}, true));
                this.columnSITE_ID.AllowDBNull = false;
                this.columnWORK_CATEGORY.AllowDBNull = false;
                this.columnLOB_NAME.AllowDBNull = false;
                this.columnLOB_LEVEL.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONRow NewDD_MVI_AWD_LOB_DEFINITIONRow() {
                return ((DD_MVI_AWD_LOB_DEFINITIONRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DD_MVI_AWD_LOB_DEFINITIONRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DD_MVI_AWD_LOB_DEFINITIONRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DD_MVI_AWD_LOB_DEFINITIONRowChanged != null)) {
                    this.DD_MVI_AWD_LOB_DEFINITIONRowChanged(this, new DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent(((DD_MVI_AWD_LOB_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DD_MVI_AWD_LOB_DEFINITIONRowChanging != null)) {
                    this.DD_MVI_AWD_LOB_DEFINITIONRowChanging(this, new DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent(((DD_MVI_AWD_LOB_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DD_MVI_AWD_LOB_DEFINITIONRowDeleted != null)) {
                    this.DD_MVI_AWD_LOB_DEFINITIONRowDeleted(this, new DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent(((DD_MVI_AWD_LOB_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DD_MVI_AWD_LOB_DEFINITIONRowDeleting != null)) {
                    this.DD_MVI_AWD_LOB_DEFINITIONRowDeleting(this, new DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent(((DD_MVI_AWD_LOB_DEFINITIONRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDD_MVI_AWD_LOB_DEFINITIONRow(DD_MVI_AWD_LOB_DEFINITIONRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MVIFieldData ds = new MVIFieldData();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DD_MVI_AWD_LOB_DEFINITIONDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DD_MVI_FIELD_CHOICESRow : global::System.Data.DataRow {
            
            private DD_MVI_FIELD_CHOICESDataTable tableDD_MVI_FIELD_CHOICES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_FIELD_CHOICESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDD_MVI_FIELD_CHOICES = ((DD_MVI_FIELD_CHOICESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_ID {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.SITE_IDColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.SITE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WORK_CATEGORY {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.WORK_CATEGORYColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.WORK_CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_NAME_PARENT_VALUE {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.FIELD_NAME_PARENT_VALUEColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.FIELD_NAME_PARENT_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_NAME {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.FIELD_NAMEColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.FIELD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHOICE_VALUE {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.CHOICE_VALUEColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.CHOICE_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CHOICE_DISPLAY {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.CHOICE_DISPLAYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CHOICE_DISPLAY\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.CHOICE_DISPLAYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string F_DOCCLASSNAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.F_DOCCLASSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'F_DOCCLASSNAME\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.F_DOCCLASSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DOCUMENT_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.DOCUMENT_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOCUMENT_TYPE\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.DOCUMENT_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LINE_OF_BUSINESS {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.LINE_OF_BUSINESSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LINE_OF_BUSINESS\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.LINE_OF_BUSINESSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEFAULT_CHOICE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.DEFAULT_CHOICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFAULT_CHOICE\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.DEFAULT_CHOICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_DOCCLASSNAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.FNP8_DOCCLASSNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_DOCCLASSNAME\' in table \'DD_MVI_FIELD_CHOICES\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.FNP8_DOCCLASSNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_OBJECTSTORE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.FNP8_OBJECTSTOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_OBJECTSTORE\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.FNP8_OBJECTSTOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_FOLDER {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CHOICES.FNP8_FOLDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_FOLDER\' in table \'DD_MVI_FIELD_CHOICES\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CHOICES.FNP8_FOLDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCHOICE_DISPLAYNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.CHOICE_DISPLAYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCHOICE_DISPLAYNull() {
                this[this.tableDD_MVI_FIELD_CHOICES.CHOICE_DISPLAYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsF_DOCCLASSNAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.F_DOCCLASSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetF_DOCCLASSNAMENull() {
                this[this.tableDD_MVI_FIELD_CHOICES.F_DOCCLASSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOCUMENT_TYPENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.DOCUMENT_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOCUMENT_TYPENull() {
                this[this.tableDD_MVI_FIELD_CHOICES.DOCUMENT_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLINE_OF_BUSINESSNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.LINE_OF_BUSINESSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLINE_OF_BUSINESSNull() {
                this[this.tableDD_MVI_FIELD_CHOICES.LINE_OF_BUSINESSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFAULT_CHOICENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.DEFAULT_CHOICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFAULT_CHOICENull() {
                this[this.tableDD_MVI_FIELD_CHOICES.DEFAULT_CHOICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_DOCCLASSNAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.FNP8_DOCCLASSNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_DOCCLASSNAMENull() {
                this[this.tableDD_MVI_FIELD_CHOICES.FNP8_DOCCLASSNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_OBJECTSTORENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.FNP8_OBJECTSTOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_OBJECTSTORENull() {
                this[this.tableDD_MVI_FIELD_CHOICES.FNP8_OBJECTSTOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_FOLDERNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CHOICES.FNP8_FOLDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_FOLDERNull() {
                this[this.tableDD_MVI_FIELD_CHOICES.FNP8_FOLDERColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DD_MVI_FIELD_CONDITIONSRow : global::System.Data.DataRow {
            
            private DD_MVI_FIELD_CONDITIONSDataTable tableDD_MVI_FIELD_CONDITIONS;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_FIELD_CONDITIONSRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDD_MVI_FIELD_CONDITIONS = ((DD_MVI_FIELD_CONDITIONSDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_ID {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.SITE_IDColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.SITE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WORK_CATEGORY {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.WORK_CATEGORYColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.WORK_CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_NAME {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.FIELD_NAMEColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.FIELD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.FIELD_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIELD_VALUE\' in table \'DD_MVI_FIELD_CONDITIONS\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.FIELD_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONDITIONAL_FIELD_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONDITIONAL_FIELD_NAME\' in table \'DD_MVI_FIELD_CONDITIONS\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONDITIONAL_FIELD_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONDITIONAL_FIELD_VALUE\' in table \'DD_MVI_FIELD_CONDITIONS\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONDITIONAL_OPERATOR {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_OPERATORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONDITIONAL_OPERATOR\' in table \'DD_MVI_FIELD_CONDITIONS\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_OPERATORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIELD_VALUENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CONDITIONS.FIELD_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIELD_VALUENull() {
                this[this.tableDD_MVI_FIELD_CONDITIONS.FIELD_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONDITIONAL_FIELD_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONDITIONAL_FIELD_NAMENull() {
                this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONDITIONAL_FIELD_VALUENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONDITIONAL_FIELD_VALUENull() {
                this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_FIELD_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONDITIONAL_OPERATORNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_OPERATORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONDITIONAL_OPERATORNull() {
                this[this.tableDD_MVI_FIELD_CONDITIONS.CONDITIONAL_OPERATORColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DD_MVI_FIELD_DEFINITIONRow : global::System.Data.DataRow {
            
            private DD_MVI_FIELD_DEFINITIONDataTable tableDD_MVI_FIELD_DEFINITION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_FIELD_DEFINITIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDD_MVI_FIELD_DEFINITION = ((DD_MVI_FIELD_DEFINITIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_ID {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.SITE_IDColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.SITE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WORK_CATEGORY {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.WORK_CATEGORYColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.WORK_CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_NAME {
                get {
                    return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_NAMEColumn]));
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_LABEL {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_LABELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIELD_LABEL\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_LABELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FN_PROP_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FN_PROP_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FN_PROP_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FN_PROP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SP_PARAM_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.SP_PARAM_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SP_PARAM_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.SP_PARAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IA_MDF_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.IA_MDF_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IA_MDF_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.IA_MDF_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEFAULT_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.DEFAULT_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DEFAULT_VALUE\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.DEFAULT_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FIELD_ORDER {
                get {
                    try {
                        return ((int)(this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_ORDERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIELD_ORDER\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_ORDERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCATION {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.LOCATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCATION\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.LOCATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VISIBLE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.VISIBLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VISIBLE\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.VISIBLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REQUIRED {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.REQUIREDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REQUIRED\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.REQUIREDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CONDITIONAL {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.CONDITIONALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CONDITIONAL\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.CONDITIONALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCKED {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.LOCKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCKED\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.LOCKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REMEMBER_VALUES {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMEMBER_VALUES\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MAX_LENGTH {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.MAX_LENGTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MAX_LENGTH\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.MAX_LENGTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VALIDATION {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.VALIDATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VALIDATION\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.VALIDATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIELD_TYPE\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FIELD_NAME_PARENT {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_NAME_PARENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FIELD_NAME_PARENT\' in table \'DD_MVI_FIELD_DEFINITION\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_NAME_PARENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOCAL_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.LOCAL_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LOCAL_VALUE\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.LOCAL_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MASK {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.MASKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MASK\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.MASKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REMEMBER_VALUES_CHECKED {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUES_CHECKEDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'REMEMBER_VALUES_CHECKED\' in table \'DD_MVI_FIELD_DEFINITION\'" +
                                " is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUES_CHECKEDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FN_DATE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FN_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FN_DATE\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FN_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FO_PARAM_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FO_PARAM_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FO_PARAM_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FO_PARAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TP_PARAM_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.TP_PARAM_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TP_PARAM_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.TP_PARAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNP8_PROP_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.FNP8_PROP_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FNP8_PROP_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.FNP8_PROP_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INVOICE_PARAM_NAME {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_FIELD_DEFINITION.INVOICE_PARAM_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INVOICE_PARAM_NAME\' in table \'DD_MVI_FIELD_DEFINITION\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_FIELD_DEFINITION.INVOICE_PARAM_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIELD_LABELNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FIELD_LABELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIELD_LABELNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_LABELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFN_PROP_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FN_PROP_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFN_PROP_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FN_PROP_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSP_PARAM_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.SP_PARAM_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSP_PARAM_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.SP_PARAM_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIA_MDF_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.IA_MDF_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIA_MDF_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.IA_MDF_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEFAULT_VALUENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.DEFAULT_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEFAULT_VALUENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.DEFAULT_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIELD_ORDERNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FIELD_ORDERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIELD_ORDERNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_ORDERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCATIONNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.LOCATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCATIONNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.LOCATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVISIBLENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.VISIBLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVISIBLENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.VISIBLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREQUIREDNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.REQUIREDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREQUIREDNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.REQUIREDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCONDITIONALNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.CONDITIONALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCONDITIONALNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.CONDITIONALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCKEDNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.LOCKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCKEDNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.LOCKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREMEMBER_VALUESNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREMEMBER_VALUESNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMAX_LENGTHNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.MAX_LENGTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMAX_LENGTHNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.MAX_LENGTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVALIDATIONNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.VALIDATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVALIDATIONNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.VALIDATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIELD_TYPENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FIELD_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIELD_TYPENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFIELD_NAME_PARENTNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FIELD_NAME_PARENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFIELD_NAME_PARENTNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FIELD_NAME_PARENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLOCAL_VALUENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.LOCAL_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLOCAL_VALUENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.LOCAL_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMASKNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.MASKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMASKNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.MASKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREMEMBER_VALUES_CHECKEDNull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUES_CHECKEDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREMEMBER_VALUES_CHECKEDNull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.REMEMBER_VALUES_CHECKEDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFN_DATENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FN_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFN_DATENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FN_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFO_PARAM_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FO_PARAM_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFO_PARAM_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FO_PARAM_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTP_PARAM_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.TP_PARAM_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTP_PARAM_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.TP_PARAM_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNP8_PROP_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.FNP8_PROP_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNP8_PROP_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.FNP8_PROP_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINVOICE_PARAM_NAMENull() {
                return this.IsNull(this.tableDD_MVI_FIELD_DEFINITION.INVOICE_PARAM_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINVOICE_PARAM_NAMENull() {
                this[this.tableDD_MVI_FIELD_DEFINITION.INVOICE_PARAM_NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DD_MVI_AWD_LOB_DEFINITIONRow : global::System.Data.DataRow {
            
            private DD_MVI_AWD_LOB_DEFINITIONDataTable tableDD_MVI_AWD_LOB_DEFINITION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DD_MVI_AWD_LOB_DEFINITIONRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDD_MVI_AWD_LOB_DEFINITION = ((DD_MVI_AWD_LOB_DEFINITIONDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SITE_ID {
                get {
                    return ((string)(this[this.tableDD_MVI_AWD_LOB_DEFINITION.SITE_IDColumn]));
                }
                set {
                    this[this.tableDD_MVI_AWD_LOB_DEFINITION.SITE_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WORK_CATEGORY {
                get {
                    return ((string)(this[this.tableDD_MVI_AWD_LOB_DEFINITION.WORK_CATEGORYColumn]));
                }
                set {
                    this[this.tableDD_MVI_AWD_LOB_DEFINITION.WORK_CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOB_NAME {
                get {
                    return ((string)(this[this.tableDD_MVI_AWD_LOB_DEFINITION.LOB_NAMEColumn]));
                }
                set {
                    this[this.tableDD_MVI_AWD_LOB_DEFINITION.LOB_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LOB_LEVEL {
                get {
                    return ((string)(this[this.tableDD_MVI_AWD_LOB_DEFINITION.LOB_LEVELColumn]));
                }
                set {
                    this[this.tableDD_MVI_AWD_LOB_DEFINITION.LOB_LEVELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SOURCE {
                get {
                    try {
                        return ((string)(this[this.tableDD_MVI_AWD_LOB_DEFINITION.SOURCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SOURCE\' in table \'DD_MVI_AWD_LOB_DEFINITION\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDD_MVI_AWD_LOB_DEFINITION.SOURCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSOURCENull() {
                return this.IsNull(this.tableDD_MVI_AWD_LOB_DEFINITION.SOURCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSOURCENull() {
                this[this.tableDD_MVI_AWD_LOB_DEFINITION.SOURCEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DD_MVI_FIELD_CHOICESRowChangeEvent : global::System.EventArgs {
            
            private DD_MVI_FIELD_CHOICESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESRowChangeEvent(DD_MVI_FIELD_CHOICESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CHOICESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DD_MVI_FIELD_CONDITIONSRowChangeEvent : global::System.EventArgs {
            
            private DD_MVI_FIELD_CONDITIONSRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CONDITIONSRowChangeEvent(DD_MVI_FIELD_CONDITIONSRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_CONDITIONSRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DD_MVI_FIELD_DEFINITIONRowChangeEvent : global::System.EventArgs {
            
            private DD_MVI_FIELD_DEFINITIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONRowChangeEvent(DD_MVI_FIELD_DEFINITIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_FIELD_DEFINITIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent : global::System.EventArgs {
            
            private DD_MVI_AWD_LOB_DEFINITIONRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONRowChangeEvent(DD_MVI_AWD_LOB_DEFINITIONRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DD_MVI_AWD_LOB_DEFINITIONRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591